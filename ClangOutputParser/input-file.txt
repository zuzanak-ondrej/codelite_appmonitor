COMPLETION: append : [#std::basic_string<char> &#]append(<#_InputIterator __first#>, <#_InputIterator __last#>)
COMPLETION: assign : [#std::basic_string<char> &#]assign(<#_InputIterator __first#>, <#_InputIterator __last#>)
COMPLETION: at : [#const_reference#]at(<#size_type __n#>)[# const#]
COMPLETION: basic_string : basic_string::
COMPLETION: basic_string : [#void#]basic_string(<#_InputIterator __beg#>, <#_InputIterator __end#>{#, <#const std::allocator<char> &__a#>#})
COMPLETION: begin : [#const_iterator#]begin()[# const#]
COMPLETION: c_str : [#const char *#]c_str()[# const#]
COMPLETION: capacity : [#size_type#]capacity()[# const#]
COMPLETION: compare : [#int#]compare(<#const std::basic_string<char> &__str#>)[# const#]
COMPLETION: compare : [#int#]compare(<#size_type __pos#>, <#size_type __n#>, <#const std::basic_string<char> &__str#>)[# const#]
COMPLETION: compare : [#int#]compare(<#size_type __pos1#>, <#size_type __n1#>, <#const std::basic_string<char> &__str#>, <#size_type __pos2#>, <#size_type __n2#>)[# const#]
COMPLETION: compare : [#int#]compare(<#const char *__s#>)[# const#]
COMPLETION: compare : [#int#]compare(<#size_type __pos#>, <#size_type __n1#>, <#const char *__s#>)[# const#]
COMPLETION: compare : [#int#]compare(<#size_type __pos#>, <#size_type __n1#>, <#const char *__s#>, <#size_type __n2#>)[# const#]
COMPLETION: copy : [#size_type#]copy(<#char *__s#>, <#size_type __n#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: data : [#const char *#]data()[# const#]
COMPLETION: empty : [#bool#]empty()[# const#]
COMPLETION: end : [#const_iterator#]end()[# const#]
COMPLETION: find : [#size_type#]find(<#const char *__s#>, <#size_type __pos#>, <#size_type __n#>)[# const#]
COMPLETION: find : [#size_type#]find(<#const std::basic_string<char> &__str#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find : [#size_type#]find(<#const char *__s#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find : [#size_type#]find(<#char __c#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_first_not_of : [#size_type#]find_first_not_of(<#const std::basic_string<char> &__str#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_first_not_of : [#size_type#]find_first_not_of(<#const char *__s#>, <#size_type __pos#>, <#size_type __n#>)[# const#]
COMPLETION: find_first_not_of : [#size_type#]find_first_not_of(<#const char *__s#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_first_not_of : [#size_type#]find_first_not_of(<#char __c#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_first_of : [#size_type#]find_first_of(<#const std::basic_string<char> &__str#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_first_of : [#size_type#]find_first_of(<#const char *__s#>, <#size_type __pos#>, <#size_type __n#>)[# const#]
COMPLETION: find_first_of : [#size_type#]find_first_of(<#const char *__s#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_first_of : [#size_type#]find_first_of(<#char __c#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_last_not_of : [#size_type#]find_last_not_of(<#const std::basic_string<char> &__str#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_last_not_of : [#size_type#]find_last_not_of(<#const char *__s#>, <#size_type __pos#>, <#size_type __n#>)[# const#]
COMPLETION: find_last_not_of : [#size_type#]find_last_not_of(<#const char *__s#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_last_not_of : [#size_type#]find_last_not_of(<#char __c#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_last_of : [#size_type#]find_last_of(<#const std::basic_string<char> &__str#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_last_of : [#size_type#]find_last_of(<#const char *__s#>, <#size_type __pos#>, <#size_type __n#>)[# const#]
COMPLETION: find_last_of : [#size_type#]find_last_of(<#const char *__s#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: find_last_of : [#size_type#]find_last_of(<#char __c#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: get_allocator : [#allocator_type#]get_allocator()[# const#]
COMPLETION: insert : [#void#]insert(<#iterator __p#>, <#_InputIterator __beg#>, <#_InputIterator __end#>)
COMPLETION: length : [#size_type#]length()[# const#]
COMPLETION: max_size : [#size_type#]max_size()[# const#]
COMPLETION: npos : [#const size_type#]npos
COMPLETION: operator[] : [#const_reference#]operator[](<#size_type __pos#>)[# const#]
COMPLETION: rbegin : [#const_reverse_iterator#]rbegin()[# const#]
COMPLETION: rend : [#const_reverse_iterator#]rend()[# const#]
COMPLETION: replace : [#std::basic_string<char> &#]replace(<#iterator __i1#>, <#iterator __i2#>, <#_InputIterator __k1#>, <#_InputIterator __k2#>)
COMPLETION: rfind : [#size_type#]rfind(<#const std::basic_string<char> &__str#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: rfind : [#size_type#]rfind(<#const char *__s#>, <#size_type __pos#>, <#size_type __n#>)[# const#]
COMPLETION: rfind : [#size_type#]rfind(<#const char *__s#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: rfind : [#size_type#]rfind(<#char __c#>{#, <#size_type __pos#>#})[# const#]
COMPLETION: size : [#size_type#]size()[# const#]
COMPLETION: substr : [#std::basic_string<char>#]substr({#<#size_type __pos#>{#, <#size_type __n#>#}#})[# const#]
