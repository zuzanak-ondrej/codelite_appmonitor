<?xml version="1.0" encoding="utf-8"?>
<CodeLite_Project Name="Parser">
  <Plugins>
    <Plugin Name="qmake">
      <![CDATA[00010001N0007Release000000000000]]>
    </Plugin>
    <Plugin Name="CMakePlugin">
      <![CDATA[[{
  "name": "Release",
  "enabled": false,
  "buildDirectory": "build",
  "sourceDirectory": "$(ProjectPath)",
  "generator": "",
  "buildType": "",
  "arguments": [],
  "parentProject": ""
 }]]]>
    </Plugin>
  </Plugins>
  <VirtualDirectory Name="src">
    <File Name="scope_parser.cpp"/>
    <File Name="cpp_lexer.cpp"/>
    <File Name="main.cpp"/>
    <File Name="var_parser.cpp"/>
    <File Name="variable.cpp"/>
    <File Name="cpp_expr_parser.cpp"/>
    <File Name="cpp_expr_lexer.cpp"/>
    <File Name="expression_result.cpp"/>
    <File Name="function.cpp"/>
    <File Name="cpp_func_parser.cpp"/>
    <File Name="typedef_parser.cpp"/>
  </VirtualDirectory>
  <VirtualDirectory Name="incldue">
    <File Name="cpp_lexer.h"/>
    <File Name="variable.h"/>
    <File Name="expression_result.h"/>
    <File Name="function.h"/>
    <File Name="cl_typedef.h"/>
    <File Name="code_completion_api.h"/>
  </VirtualDirectory>
  <VirtualDirectory Name="grammar">
    <File Name="cpp.l"/>
    <File Name="cpp_scope_grammar.y"/>
    <File Name="cpp_variables_grammar.y"/>
    <File Name="expr_grammar.y"/>
    <File Name="expr_lexer.l"/>
    <File Name="cpp_func_parser.y"/>
    <File Name="typedef_grammar.y"/>
  </VirtualDirectory>
  <Dependencies/>
  <VirtualDirectory Name="test_suite">
    <File Name="Debug/test.h"/>
  </VirtualDirectory>
  <Dependencies Name="Release"/>
  <Settings Type="Executable">
    <GlobalSettings>
      <Compiler Options="" C_Options="" Assembler="">
        <IncludePath Value="."/>
      </Compiler>
      <Linker Options="">
        <LibraryPath Value="."/>
      </Linker>
      <ResourceCompiler Options=""/>
    </GlobalSettings>
    <Configuration Name="Release" CompilerType="g++-64" DebuggerType="GNU gdb debugger" Type="Executable" BuildCmpWithGlobalSettings="append" BuildLnkWithGlobalSettings="append" BuildResWithGlobalSettings="append">
      <Compiler Options="-g;-O0" C_Options="-g;" Assembler="" Required="yes" PreCompiledHeader="" PCHInCommandLine="no" PCHFlags="" PCHFlagsPolicy="0">
        <IncludePath Value="."/>
      </Compiler>
      <Linker Options="-O2" Required="yes">
        <LibraryPath Value="."/>
        <LibraryPath Value="./Release"/>
      </Linker>
      <ResourceCompiler Options="" Required="yes"/>
      <General OutputFile="./Release/CppParser" IntermediateDirectory="./Release" Command="CppParser" CommandArguments="" UseSeparateDebugArgs="no" DebugArguments="" WorkingDirectory="./Release" PauseExecWhenProcTerminates="yes" IsGUIProgram="no" IsEnabled="yes"/>
      <Environment EnvVarSetName="&lt;Use Defaults&gt;" DbgSetName="&lt;Use Defaults&gt;">
        <![CDATA[]]>
      </Environment>
      <Debugger IsRemote="no" RemoteHostName="" RemoteHostPort="" DebuggerPath="" IsExtended="no">
        <DebuggerSearchPaths/>
        <PostConnectCommands/>
        <StartupCommands/>
      </Debugger>
      <PreBuild/>
      <PostBuild>
        <Command Enabled="yes">copy *.h ..\CodeLite\.</Command>
        <Command Enabled="yes">copy *.cpp ..\CodeLite\.</Command>
      </PostBuild>
      <CustomBuild Enabled="no">
        <RebuildCommand/>
        <CleanCommand/>
        <BuildCommand/>
        <PreprocessFileCommand/>
        <SingleFileCommand/>
        <MakefileGenerationCommand/>
        <ThirdPartyToolName>None</ThirdPartyToolName>
        <WorkingDirectory/>
      </CustomBuild>
      <AdditionalRules>
        <CustomPostBuild/>
        <CustomPreBuild>scope_parser.cpp cpp_lexer.cpp var_parser.cpp cpp_expr_lexer.cpp cpp_expr_parser.cpp cpp_func_parser.cpp typedef_parser.cpp
scope_parser.cpp: cpp_scope_grammar.y
	yacc -dl  -t -v -pcl_scope_ cpp_scope_grammar.y
	mv y.tab.c scope_parser.cpp
	mv y.tab.h cpp_lexer.h

cpp_lexer.cpp: cpp.l
	flex -L  -Pcl_scope_ cpp.l
	sed  -e "s/YY_BUF_SIZE 16384/YY_BUF_SIZE 16384*5/g" lex.cl_scope_.c &gt; cpp_lexer.cpp

typedef_parser.cpp: typedef_grammar.y
	yacc -l  -t -v -pcl_typedef_  typedef_grammar.y
	mv y.tab.c typedef_parser.cpp

var_parser.cpp: cpp_variables_grammar.y
	yacc -l  -t -v -pcl_var_ cpp_variables_grammar.y
	mv y.tab.c var_parser.cpp

cpp_expr_lexer.cpp: expr_lexer.l
	flex -L  -Pcl_expr_ expr_lexer.l
	sed  -e "s/YY_BUF_SIZE 16384/YY_BUF_SIZE 16384*5/g" lex.cl_expr_.c &gt; cpp_expr_lexer.cpp

cpp_expr_parser.cpp: expr_grammar.y
	yacc -l  -t -v -pcl_expr_ expr_grammar.y
	mv y.tab.c cpp_expr_parser.cpp

cpp_func_parser.cpp: cpp_func_parser.y
	yacc -l  -t -v -pcl_func_ cpp_func_parser.y
	mv y.tab.c cpp_func_parser.cpp
</CustomPreBuild>
      </AdditionalRules>
      <Completion EnableCpp11="no" EnableCpp14="no">
        <ClangCmpFlagsC/>
        <ClangCmpFlags/>
        <ClangPP/>
        <SearchPaths/>
      </Completion>
    </Configuration>
  </Settings>
</CodeLite_Project>
