/** Define macro with agruments **/
#define FUNC_LIKE_MACRO( str ) if ( str.empty() ) { \
    return false;\
 } else { \
    return true; \
 }

namespace foospace
{
    
int Foo( int b )
{
    if ( b == 0 ) {
        return 0;
    } else if ( b == 1 ) {
        return 2;
    } else {
        return b * b;
    }
}

class Foo
{
    std::string m_name;
    std::string m_lastName;
public:
    /**
     * constructor with an initializatin list
     */
    Foo() : m_name(""), m_lastName("") {}
    void Bar() {
        switch ( foo ) { // switch
        case 1: // case 1
            break; // break
        case 2: { // case 2
            break;
        }
        }
    };
    virtual ~Foo();
    bool FunctionWithParameter(int size, const std::string& str, long longValue);
};

bool Foo::FunctionWithParameter(int size, const std::string& str, long longValue)
{
    return false;
}
}
